{
  "name": "trivy-vulnerability-scanner",
  "displayName": "Aqua Trivy",
  "publisher": "AquaSecurityOfficial",
  "description": "Find vulnerabilities, misconfigurations and exposed secrets in your code",
  "icon": "images/icon.png",
  "version": "1.2.2",
  "engines": {
    "vscode": "^1.99.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "extensionDependencies": [
    "github.copilot-chat"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "chatParticipants": [
      {
        "id": "trivy-chat",
        "name": "trivy",
        "description": "Aqua Trivy Chat to interact with vulnerabilities found by this extension"
      }
    ],
    "configuration": {
      "title": "Trivy",
      "properties": {
        "trivy.binaryPath": {
          "type": "string",
          "default": "trivy",
          "description": "Path to Trivy if not already on the PATH"
        },
        "trivy.debug": {
          "type": "boolean",
          "default": false,
          "description": "Run Trivy with vebose flag to get more information"
        },
        "trivy.vulnScanning": {
          "type": "boolean",
          "default": true,
          "description": "Trivy should scan for vulnerabilities",
          "scope": "window"
        },
        "trivy.misconfigScanning": {
          "type": "boolean",
          "default": true,
          "description": "Trivy should scan for misconfigurations",
          "scope": "window"
        },
        "trivy.secretScanning": {
          "type": "boolean",
          "default": false,
          "description": "Trivy should also scan for secrets, requires Trivy >=v0.27.0",
          "scope": "window"
        },
        "trivy.offlineScan": {
          "type": "boolean",
          "default": false,
          "description": "Run Trivy as an offline scan",
          "scope": "window"
        },
        "trivy.fixedOnly": {
          "type": "boolean",
          "default": false,
          "description": "Only return Trivy results for vulnerabilities with fixes",
          "scope": "window"
        },
        "trivy.minimumReportedSeverity": {
          "type": "string",
          "default": "UNKNOWN",
          "enum": [
            "CRITICAL",
            "HIGH",
            "MEDIUM",
            "LOW",
            "UNKNOWN"
          ],
          "description": "Return Trivy results with severity greater than or equal to this setting.",
          "scope": "window"
        },
        "trivy.useIgnoreFile": {
          "type": "boolean",
          "default": false,
          "description": "Use the .trivyignore.yaml file in the workspace",
          "scope": "window"
        },
        "trivy.ignoreFilePath": {
          "type": "string",
          "default": "",
          "description": "Path to the .trivyignore.yaml file in the workspace",
          "scope": "window"
        },
        "trivy.useConfigFile": {
          "type": "boolean",
          "default": false,
          "description": "Use a config file, defaults to trivy.yaml in the workspace",
          "scope": "window"
        },
        "trivy.onlyUseConfigFile": {
          "type": "boolean",
          "default": false,
          "description": "Only use the config file, do not use other settings",
          "scope": "window"
        },
        "trivy.configFilePath": {
          "type": "string",
          "default": "",
          "description": "Path to the trivy.yaml file in the workspace",
          "scope": "window"
        },
        "trivy.ignoreFilesInGitIgnore": {
          "type": "boolean",
          "default": false,
          "description": "Ignore files in .gitignore",
          "scope": "window"
        },
        "trivy.aquaApiUrl": {
          "type": "string",
          "default": "",
          "description": "Aqua API URL"
        },
        "trivy.aquaAuthenticationUrl": {
          "type": "string",
          "default": "",
          "description": "Aqua API URL"
        },
        "trivy.useAquaPlatform": {
          "type": "boolean",
          "default": false,
          "description": "Use Aqua Platform for scanning",
          "scope": "window"
        },
        "trivy.uploadResults": {
          "type": "boolean",
          "default": false,
          "description": "Upload results to Aqua Platform",
          "scope": "window"
        },
        "trivy.orderResultsByType": {
          "type": "boolean",
          "default": true,
          "description": "Order results by type",
          "scope": "application"
        }
      }
    },
    "commands": [
      {
        "command": "trivy.install",
        "title": "Trivy: Install Trivy"
      },
      {
        "command": "trivy.update",
        "title": "Update Trivy"
      },
      {
        "command": "trivy.scan",
        "title": "Trivy: Run trivy against workspace",
        "icon": {
          "light": "resources/light/refresh.svg",
          "dark": "resources/dark/refresh.svg"
        },
        "enablement": "trivy.installed"
      },
      {
        "command": "trivy.reset",
        "title": "Trivy: Reset the issue list",
        "icon": {
          "light": "resources/light/trash.svg",
          "dark": "resources/dark/trash.svg"
        }
      },
      {
        "command": "trivy.reset",
        "title": "Trivy: Reset the issue list",
        "icon": {
          "light": "resources/light/trash.svg",
          "dark": "resources/dark/trash.svg"
        }
      },
      {
        "command": "trivy.setupCommercial",
        "title": "Trivy Aqua Platform Integration"
      },
      {
        "command": "trivy.refresh",
        "title": "Refresh the issue list"
      },
      {
        "command": "trivy.version",
        "title": "Show Trivy version"
      },
      {
        "command": "trivy.useIgnoreFile",
        "title": "Use ignore file"
      },
      {
        "command": "trivy.disableUseIgnoreFile",
        "title": "✓ Use ignore file"
      },
      {
        "command": "trivy.setIgnoreFilePath",
        "title": "Set trivy ignore file"
      },
      {
        "command": "trivy.unsetIgnoreFilePath",
        "title": "✓ Set trivy ignore file"
      },
      {
        "command": "trivy.offlineScan",
        "title": "Offline scanning"
      },
      {
        "command": "trivy.disableOfflineScan",
        "title": "✓ Offline scanning"
      },
      {
        "command": "trivy.scanForVulns",
        "title": "Scan for vulnerabilities"
      },
      {
        "command": "trivy.disableScanForVulns",
        "title": "✓ Scan for vulnerabilities"
      },
      {
        "command": "trivy.scanForMisconfigs",
        "title": "Scan for misconfigurations"
      },
      {
        "command": "trivy.disableScanForMisconfigs",
        "title": "✓ Scan for misconfigurations"
      },
      {
        "command": "trivy.scanForSecrets",
        "title": "Scan for sensitive data"
      },
      {
        "command": "trivy.disableScanForSecrets",
        "title": "✓ Scan for sensitive data"
      },
      {
        "command": "trivy.onlyFixedIssues",
        "title": "Only show fixed issues"
      },
      {
        "command": "trivy.disableOnlyFixedIssues",
        "title": "✓ Only show fixed issues"
      },
      {
        "command": "trivy.useConfigFile",
        "title": "Use config override"
      },
      {
        "command": "trivy.disableUseConfigFile",
        "title": "✓ Use config override"
      },
      {
        "command": "trivy.onlyUseConfigFile",
        "title": "Only use config file"
      },
      {
        "command": "trivy.disableOnlyUseConfigFile",
        "title": "✓ Only use config file"
      },
      {
        "command": "trivy.setConfigFilePath",
        "title": "Set explicit config file"
      },
      {
        "command": "trivy.unsetConfigFilePath",
        "title": "✓ Set explicit config file"
      },
      {
        "command": "trivy.setOrderResultsByType",
        "title": "Order results by type and severity"
      },
      {
        "command": "trivy.unsetOrderResultsByType",
        "title": "✓ Order results by type and severity"
      },
      {
        "command": "trivy.update",
        "title": "Update Trivy"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "trivy",
          "title": "Trivy",
          "icon": "media/trivy.svg"
        }
      ]
    },
    "views": {
      "trivy": [
        {
          "id": "trivyIssueViewer",
          "name": "Findings",
          "icon": "media/trivy.svg",
          "contextualTitle": "Findings"
        },
        {
          "id": "trivyAssuranceViewer",
          "name": "Assurance Policies",
          "icon": "media/trivy.svg",
          "contextualTitle": "Assurance Policies",
          "when": "trivy.useAquaPlatform"
        },
        {
          "id": "trivyHelpViewer",
          "name": "Details",
          "type": "webview",
          "icon": "media/trivy.svg",
          "contextualTitle": "Details",
          "when": "trivy.installed"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "trivyIssueViewer",
        "contents": "$(loading~spin) Loading...",
        "when": "!trivy.extensionLoaded || trivy.scanRunning"
      },
      {
        "view": "trivyIssueViewer",
        "contents": "Click the button below to run Trivy against the current workspace.\n[Scan Now](command:trivy.scan)\n\nIf using with Aqua Platform you can use the button below to configure\n[Configure Aqua Platform](command:trivy.setupCommercial)\n",
        "when": "trivy.extensionLoaded && trivy.installed &&  !trivy.scanRunning"
      },
      {
        "view": "trivyIssueViewer",
        "contents": "Trivy does not appear to be installed.\n\nIf you believe it is installed \n[Specify Trivy Location](command:workbench.action.openSettings?%22trivy.binaryPath%22)\n Click the button below to install Trivy.\n[Install Trivy](command:trivy.install)\n",
        "when": "trivy.extensionLoaded && !trivy.installed"
      },
      {
        "view": "trivyHelpViewer",
        "contents": "No check selected. Run Trivy and choose a failed check from the explorer",
        "when": "trivy.extensionLoaded && trivy.installed"
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "trivy.scan",
          "when": "view == trivyIssueViewer",
          "group": "navigation@1"
        },
        {
          "command": "trivy.reset",
          "when": "view == trivyIssueViewer",
          "group": "navigation@2"
        },
        {
          "submenu": "trivyIgnoreMenu",
          "when": "view == trivyIssueViewer && !trivy.useAquaPlatform",
          "group": "1_ignore"
        },
        {
          "submenu": "trivyConfigMenu",
          "when": "view == trivyIssueViewer && !trivy.useAquaPlatform",
          "group": "2_config"
        },
        {
          "command": "trivy.offlineScan",
          "when": "view == trivyIssueViewer && !trivy.offlineScan",
          "group": "3_setting@1"
        },
        {
          "command": "trivy.disableOfflineScan",
          "when": "view == trivyIssueViewer && trivy.offlineScan",
          "group": "3_setting@1"
        },
        {
          "command": "trivy.onlyFixedIssues",
          "when": "view == trivyIssueViewer && !trivy.fixedOnly",
          "group": "3_setting@3"
        },
        {
          "command": "trivy.disableOnlyFixedIssues",
          "when": "view == trivyIssueViewer && trivy.fixedOnly",
          "group": "3_setting@3"
        },
        {
          "command": "trivy.setOrderResultsByType",
          "when": "view == trivyIssueViewer && !trivy.orderResultsByType",
          "group": "3_setting@4"
        },
        {
          "command": "trivy.unsetOrderResultsByType",
          "when": "view == trivyIssueViewer && trivy.orderResultsByType",
          "group": "3_setting@4"
        },
        {
          "command": "trivy.scanForVulns",
          "when": "view == trivyIssueViewer && !trivy.vulnScanning",
          "group": "3_scanners@1"
        },
        {
          "command": "trivy.disableScanForVulns",
          "when": "view == trivyIssueViewer && trivy.vulnScanning",
          "group": "3_scanners@1"
        },
        {
          "command": "trivy.scanForMisconfigs",
          "when": "view == trivyIssueViewer && !trivy.misconfigScanning",
          "group": "3_scanners@2"
        },
        {
          "command": "trivy.disableScanForMisconfigs",
          "when": "view == trivyIssueViewer && trivy.misconfigScanning",
          "group": "3_scanners@2"
        },
        {
          "command": "trivy.scanForSecrets",
          "when": "view == trivyIssueViewer && !trivy.secretScanning",
          "group": "3_scanners@3"
        },
        {
          "command": "trivy.disableScanForSecrets",
          "when": "view == trivyIssueViewer && trivy.secretScanning",
          "group": "3_scanners@3"
        },
        {
          "command": "trivy.setupCommercial",
          "when": "view == trivyIssueViewer",
          "group": "4_aquaPlatform"
        },
        {
          "command": "trivy.version",
          "when": "view == trivyIssueViewer",
          "group": "5_version"
        },
        {
          "command": "trivy.update",
          "when": "view == trivyIssueViewer && !trivy.isLatest",
          "group": "5_version"
        },
        {
          "command": "trivy.scan",
          "when": "view == trivyAssuranceViewer",
          "group": "navigation@1"
        },
        {
          "command": "trivy.reset",
          "when": "view == trivyAssuranceViewer",
          "group": "navigation@2"
        }
      ],
      "trivyConfigMenu": [
        {
          "command": "trivy.useConfigFile",
          "when": "view == trivyIssueViewer && !trivy.useConfigFile",
          "group": "1_config@1"
        },
        {
          "command": "trivy.disableUseConfigFile",
          "when": "view == trivyIssueViewer && trivy.useConfigFile",
          "group": "1_config@1"
        },
        {
          "command": "trivy.onlyUseConfigFile",
          "when": "view == trivyIssueViewer && !trivy.onlyUseConfigFile",
          "group": "1_config@2"
        },
        {
          "command": "trivy.disableOnlyUseConfigFile",
          "when": "view == trivyIssueViewer && trivy.onlyUseConfigFile",
          "group": "1_config@2"
        },
        {
          "command": "trivy.setConfigFilePath",
          "when": "view == trivyIssueViewer && !trivy.configFilePath",
          "group": "1_config@3"
        },
        {
          "command": "trivy.unsetConfigFilePath",
          "when": "view == trivyIssueViewer && trivy.configFilePath",
          "group": "1_config@4"
        }
      ],
      "trivyIgnoreMenu": [
        {
          "command": "trivy.useIgnoreFile",
          "when": "view == trivyIssueViewer && !trivy.useIgnoreFile",
          "group": "1_ignore@1"
        },
        {
          "command": "trivy.disableUseIgnoreFile",
          "when": "view == trivyIssueViewer && trivy.useIgnoreFile",
          "group": "1_ignore@1"
        },
        {
          "command": "trivy.setIgnoreFilePath",
          "when": "view == trivyIssueViewer && !trivy.ignoreFilePath",
          "group": "1_ignore@2"
        },
        {
          "command": "trivy.unsetIgnoreFilePath",
          "when": "view == trivyIssueViewer && trivy.ignoreFilePath",
          "group": "1_ignore@3"
        }
      ],
      "commandPalette": [
        {
          "command": "trivy.disableOfflineScan",
          "when": "false"
        },
        {
          "command": "trivy.disableOnlyFixedIssues",
          "when": "false"
        },
        {
          "command": "trivy.disableOnlyUseConfigFile",
          "when": "false"
        },
        {
          "command": "trivy.disableScanForSecrets",
          "when": "false"
        },
        {
          "command": "trivy.disableUseConfigFile",
          "when": "false"
        },
        {
          "command": "trivy.disableUseIgnoreFile",
          "when": "false"
        },
        {
          "command": "trivy.offlineScan",
          "when": "false"
        },
        {
          "command": "trivy.onlyFixedIssues",
          "when": "false"
        },
        {
          "command": "trivy.onlyUseConfigFile",
          "when": "false"
        },
        {
          "command": "trivy.refresh",
          "when": "false"
        },
        {
          "command": "trivy.scan",
          "when": "false"
        },
        {
          "command": "trivy.scanForSecrets",
          "when": "false"
        },
        {
          "command": "trivy.setConfigFilePath",
          "when": "false"
        },
        {
          "command": "trivy.setIgnoreFilePath",
          "when": "false"
        },
        {
          "command": "trivy.unsetConfigFilePath",
          "when": "false"
        },
        {
          "command": "trivy.unsetIgnoreFilePath",
          "when": "false"
        },
        {
          "command": "trivy.useConfigFile",
          "when": "false"
        },
        {
          "command": "trivy.useIgnoreFile",
          "when": "false"
        }
      ]
    },
    "submenus": [
      {
        "id": "trivyIgnoreMenu",
        "label": ".ignorefile"
      },
      {
        "id": "trivyConfigMenu",
        "label": "Config File"
      }
    ],
    "walkthroughs": [
      {
        "id": "trivy",
        "title": "Trivy Quick Start",
        "description": "This walkthrough will guide you through the basics of using Trivy in VS Code.",
        "steps": [
          {
            "id": "opentrivy",
            "title": "Open Trivy explorer from the Activity Bar",
            "description": "Click on the Trivy icon in the Activity Bar to open the Trivy explorer.",
            "media": {
              "image": "media/open.png",
              "altText": "Open Trivy"
            },
            "completionEvents": [
              "onView:trivyIssueViewer"
            ]
          },
          {
            "id": "trivyinstalled",
            "title": "Ensure that Trivy is installed",
            "media": {
              "image": "media/open.png",
              "altText": "Open Trivy"
            },
            "description": "This extension requires Trivy to be installed on your system. [Install Trivy](command:trivy.install)",
            "completionEvents": [
              "onContext:trivy.installed"
            ]
          },
          {
            "id": "runcommand",
            "title": "Run Trivy",
            "description": "Open a directory you want to scan then [Run Trivy](command:trivy.scan).",
            "media": {
              "image": "media/scan.png",
              "altText": "Run Trivy"
            },
            "completionEvents": [
              "onCommand:trivy.scan"
            ]
          },
          {
            "id": "setupCommercial",
            "title": "Connect to Aqua Platform",
            "description": "Configure access to the [Aqua Platform](command:trivy.setupCommercial).",
            "media": {
              "image": "media/platform.png",
              "altText": "Aqua Platform"
            },
            "completionEvents": [
              "onCommand:trivy.setupCommercial"
            ]
          }
        ]
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run clean && webpack --mode production",
    "build": "webpack --mode production",
    "build:dev": "webpack --mode development",
    "compile-tests": "tsc -p ./tsconfig.test.json",
    "test-compile": "npm run build && npm run compile-tests && npm run copy-test-resources",
    "copy-test-resources": "mkdir -p out/test && cp -r test/golden ./out/test/",
    "pretest": "npm run test-compile",
    "test": "vscode-test",
    "lint": "eslint ./src ./test",
    "lint:fix": "eslint ./src ./test --fix",
    "check:deps": "eslint . --rule 'import/no-extraneous-dependencies: error' --no-inline-config",
    "format:check": "prettier --check .",
    "format": "prettier --write .",
    "clean": "rimraf out",
    "package": "vsce package",
    "publish": "vsce publish -p $PUBLISHER_TOKEN"
  },
  "devDependencies": {
    "@eslint/js": "^9.19.0",
    "@types/adm-zip": "^0.5.7",
    "@types/cors": "^2.8.17",
    "@types/crypto-js": "^4.2.2",
    "@types/express": "^5.0.1",
    "@types/glob": "^7.1.1",
    "@types/mocha": "^7.0.2",
    "@types/node": "^16.0.0",
    "@types/vscode": "^1.99.0",
    "@typescript-eslint/eslint-plugin": "^8.23.0",
    "@typescript-eslint/parser": "^8.23.0",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.4.1",
    "@vscode/vsce": "^3.2.2",
    "copy-webpack-plugin": "^13.0.0",
    "eslint": "^9.19.0",
    "eslint-import-resolver-typescript": "^3.8.5",
    "eslint-plugin-import": "^2.31.0",
    "file-loader": "^6.2.0",
    "glob": "^7.1.6",
    "globals": "^15.14.0",
    "mocha": "^11.1.0",
    "prettier": "^3.5.3",
    "rimraf": "^6.0.1",
    "ts-loader": "^9.5.2",
    "ts-node": "^10.9.2",
    "ts-node-dev": "^2.0.0",
    "typescript": "^4.9.5",
    "typescript-eslint": "^8.23.0",
    "webpack": "^5.98.0",
    "webpack-cli": "^6.0.1"
  },
  "repository": {
    "url": "https://github.com/aquasecurity/trivy-vscode-extension"
  },
  "dependencies": {
    "@modelcontextprotocol/sdk": "^1.9.0",
    "@types/moment": "^2.11.29",
    "@types/tar": "^6.1.13",
    "@vscode/codicons": "^0.0.36",
    "@vscode/webview-ui-toolkit": "^1.4.0",
    "adm-zip": "^0.5.16",
    "crypto-js": "^4.2.0",
    "express": "^5.1.0",
    "ignore": "^7.0.3",
    "moment": "^2.30.1",
    "tar": "^7.4.3",
    "webview-ui-toolkit": "^0.0.0",
    "which": "^5.0.0"
  },
  "prettier": {
    "endOfLine": "lf",
    "printWidth": 80,
    "semi": true,
    "singleQuote": true,
    "tabWidth": 2,
    "trailingComma": "es5",
    "overrides": [
      {
        "files": [
          "*.json",
          "*.js"
        ],
        "options": {
          "printWidth": 120
        }
      }
    ]
  }
}
